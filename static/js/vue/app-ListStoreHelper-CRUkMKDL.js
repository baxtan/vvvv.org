import{aa as i}from"./app.js";import{l as f}from"./app-LinksHelper-C0DPfYCg.js";const k=n=>({state:()=>({list:{},selectedSection:a[0],selectedConnection:c[0],sections:a,socialOptions:c,loading:!1}),actions:{async setSection(s,t){this.selectedSection=a.find(e=>e.key==s)??a[0],t&&(this.selectedConnection=c.find(e=>e.key==t)||c[0])},async getData(){this.selectedSection.key=="list"?await this.getList(!0):this.selectedSection.key=="connections"&&await this.getConnections(!0)},async getList(s=!1){if(!(this.list.list&&!s)){this.loading=!0;try{this.list.list=await y(d[n])}catch{this.fetched=!1}finally{this.loading=!1}}},async getConnections(s=!1){if(!(this.list.connections&&!s)){this.loading=!0;try{const t=await g(n,this.selectedConnection.key);t.items.forEach(e=>{e.profileLink=`/${n}/${e.slug}`,e.key=n}),this.list.connections=t}catch(t){console.log(t)}finally{this.loading=!1}}}}}),h="withoutEnlargement=true&fit=inside&height=120&quality=90&format=png",d={business:i.GET_COMPANIES+"?fields=*&sort=name&meta=filter_count",edu:i.GET_EDUS+"?fields=*&sort=name&meta=filter_count"},m={user:{url:`${i.GET_USERS}?fields=username,related.social.{SOCIAL}&filter[related][social][{SOCIAL}][_nempty]=true&sort=username`,itemPath:"related.social"},business:{url:`${i.GET_COMPANIES}?fields=name,slug,social.{SOCIAL}&filter[social][{SOCIAL}][_nempty]=true&sort=name`,itemPath:"social"},edu:{url:`${i.GET_EDUS}?fields=name,slug,social.{SOCIAL}&filter[social][{SOCIAL}][_nempty]=true&sort=name`,itemPath:"social"}},a=[{label:"List",key:"list",content:"List"},{label:"Connections",key:"connections",content:"Social"}],c=[{label:"GitHub",key:"github"},{label:"NuGet",key:"nuget"},{label:"Mastodon",key:"mastodon"},{label:"Pixelfed",key:"pixelfed"},{label:"LinkedIn",key:"linkedin"},{label:"YouTube",key:"youtube"},{label:"PeerTube",key:"peertube"}];async function y(n){const s=await fetch(n);if(s.ok){const t=await s.json(),e=t.data;return e.forEach(o=>{o.logo=S(o.logo)}),{items:e,total:t.meta?.filter_count??0}}else throw Error("Connection Error")}function S(n){return n?`${i.ASSETS}${n}?${h}`:null}async function g(n,s){const t=m[n],e=t?.url.replaceAll("{SOCIAL}",s);if(!e)throw new Error("Can't fetch Social");const o=await fetch(e);if(o.ok){const r=await o.json();return{items:r.data.map(l=>{const u=f(s,l[t.itemPath][s]);return{name:l.username||l.name,label:u.text,connectionLink:u.url,slug:l.slug}}),total:r.meta?.filter_count??0}}else throw Error("Connection Error")}export{k as s};
